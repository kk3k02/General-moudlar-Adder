/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module mod_adder_minus_K (
  input A0,
  input A1,
  input A2,
  input A3,
  input A4,
  input A5,
  input A6,
  input B0,
  input B1,
  input B2,
  input B3,
  input B4,
  input B5,
  input B6,
  input K0,
  input K1,
  input K2,
  input K3,
  input K4,
  input K5,
  input K6,
  input \0-3 ,
  input \0-1 ,
  input \0-2 ,
  output s6,
  output s5,
  output s4,
  output s3,
  output s2,
  output s1,
  output s0
);
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire s30;
  wire s31;
  wire s32;
  wire s33;
  wire s34;
  wire s35;
  wire s36;
  wire s37;
  wire s38;
  wire s39;
  wire s40;
  wire s41;
  wire s42;
  wire s43;
  wire s44;
  wire s45;
  wire s46;
  wire s47;
  wire s48;
  wire s49;
  wire s50;
  wire s51;
  wire s52;
  wire s53;
  wire s54;
  wire s55;
  wire s56;
  wire s57;
  wire s58;
  wire s59;
  wire s60;
  wire s61;
  wire s62;
  wire s63;
  wire s64;
  wire s65;
  wire s66;
  wire s67;
  wire s68;
  wire s69;
  wire s70;
  wire s71;
  wire s72;
  wire s73;
  wire s74;
  wire s75;
  wire s76;
  wire s77;
  wire s78;
  wire s79;
  wire s80;
  wire s81;
  wire s82;
  wire s83;
  wire s84;
  wire s85;
  wire s86;
  wire s87;
  assign s7 = (B6 & A6);
  assign s8 = (B6 | A6);
  assign s10 = (B5 & A5);
  assign s11 = (B5 | A5);
  assign s13 = (B4 & A4);
  assign s14 = (B4 | A4);
  assign s16 = (B3 & A3);
  assign s17 = (B3 | A3);
  assign s19 = (B2 & A2);
  assign s20 = (B2 | A2);
  assign s22 = (B1 & A1);
  assign s23 = (B1 | A1);
  assign s25 = (B0 & A0);
  assign s26 = (B0 | A0);
  assign s9 = (s8 & ~ s7);
  assign s12 = (s11 & ~ s10);
  assign s15 = (s14 & ~ s13);
  assign s18 = (s17 & ~ s16);
  assign s21 = (s20 & ~ s19);
  assign s24 = (s23 & ~ s22);
  assign s27 = (s26 & ~ s25);
  Mux_2x1 Mux_2x1_i0 (
    .sel( K5 ),
    .in_0( s10 ),
    .in_1( s11 ),
    .out( s28 )
  );
  Mux_2x1 Mux_2x1_i1 (
    .sel( K4 ),
    .in_0( s13 ),
    .in_1( s14 ),
    .out( s30 )
  );
  Mux_2x1 Mux_2x1_i2 (
    .sel( K3 ),
    .in_0( s16 ),
    .in_1( s17 ),
    .out( s33 )
  );
  Mux_2x1 Mux_2x1_i3 (
    .sel( K2 ),
    .in_0( s19 ),
    .in_1( s20 ),
    .out( s37 )
  );
  Mux_2x1 Mux_2x1_i4 (
    .sel( K1 ),
    .in_0( s22 ),
    .in_1( s23 ),
    .out( s39 )
  );
  assign s62 = ((s23 & s25) | s22);
  Mux_2x1 Mux_2x1_i5 (
    .sel( K0 ),
    .in_0( s25 ),
    .in_1( s26 ),
    .out( s43 )
  );
  assign s47 = ~ s9;
  assign s48 = ~ s12;
  assign s49 = ~ s15;
  assign s50 = ~ s18;
  assign s51 = ~ s21;
  assign s52 = ~ s24;
  assign s53 = ~ s27;
  assign s68 = ((s20 & s62) | s19);
  Mux_2x1 Mux_2x1_i6 (
    .sel( K6 ),
    .in_0( s9 ),
    .in_1( s47 ),
    .out( s29 )
  );
  Mux_2x1 Mux_2x1_i7 (
    .sel( K5 ),
    .in_0( s12 ),
    .in_1( s48 ),
    .out( s31 )
  );
  Mux_2x1 Mux_2x1_i8 (
    .sel( K4 ),
    .in_0( s15 ),
    .in_1( s49 ),
    .out( s34 )
  );
  Mux_2x1 Mux_2x1_i9 (
    .sel( K3 ),
    .in_0( s18 ),
    .in_1( s50 ),
    .out( s38 )
  );
  Mux_2x1 Mux_2x1_i10 (
    .sel( K2 ),
    .in_0( s21 ),
    .in_1( s51 ),
    .out( s40 )
  );
  Mux_2x1 Mux_2x1_i11 (
    .sel( K1 ),
    .in_0( s24 ),
    .in_1( s52 ),
    .out( s44 )
  );
  Mux_2x1 Mux_2x1_i12 (
    .sel( K0 ),
    .in_0( s27 ),
    .in_1( s53 ),
    .out( s45 )
  );
  assign s32 = (s30 | s31);
  assign s35 = (s33 & s34);
  assign s36 = (s33 | s34);
  assign s41 = (s39 & s40);
  assign s42 = (s39 | s40);
  assign s46 = (\0-3  & s45);
  assign s54 = (s29 ^ s28);
  assign s55 = (s31 ^ s30);
  assign s56 = (s34 ^ s33);
  assign s57 = (s38 ^ s37);
  assign s58 = (s40 ^ s39);
  assign s59 = (s44 ^ s43);
  assign s60 = (s45 ^ \0-1 );
  assign s61 = ((s11 & s34) | s10);
  assign s66 = (((s20 & s40) & s62) | ((s17 & s40) | s16));
  assign s63 = ((s32 & s35) | (s30 & s31));
  assign s64 = (s36 & s32);
  assign s65 = (((s43 | s44) & s46) | (s43 & s44));
  assign s70 = (((s14 & s34) & s66) | s61);
  assign s71 = ((s14 & s66) | s13);
  assign s67 = (((s42 & (s37 | s38)) & s65) | (((s37 | s38) & s41) | (s37 & s38)));
  assign s69 = ((s42 & s65) | s41);
  assign s72 = ((s64 & s67) | s63);
  assign s73 = ((s36 & s67) | s35);
  assign s74 = ~ ((((s64 & (s28 | s29)) & s67) | (((s28 | s29) & s63) | (s28 & s29))) | (((s32 & s8) & s66) | ((s8 & s61) | s7)));
  Mux_2x1 Mux_2x1_i13 (
    .sel( s74 ),
    .in_0( s54 ),
    .in_1( s9 ),
    .out( s75 )
  );
  Mux_2x1 Mux_2x1_i14 (
    .sel( s74 ),
    .in_0( s55 ),
    .in_1( s12 ),
    .out( s76 )
  );
  Mux_2x1 Mux_2x1_i15 (
    .sel( s74 ),
    .in_0( s56 ),
    .in_1( s15 ),
    .out( s77 )
  );
  Mux_2x1 Mux_2x1_i16 (
    .sel( s74 ),
    .in_0( s57 ),
    .in_1( s18 ),
    .out( s78 )
  );
  Mux_2x1 Mux_2x1_i17 (
    .sel( s74 ),
    .in_0( s58 ),
    .in_1( s21 ),
    .out( s79 )
  );
  Mux_2x1 Mux_2x1_i18 (
    .sel( s74 ),
    .in_0( s59 ),
    .in_1( s24 ),
    .out( s80 )
  );
  Mux_2x1 Mux_2x1_i19 (
    .sel( s74 ),
    .in_0( s72 ),
    .in_1( s70 ),
    .out( s81 )
  );
  Mux_2x1 Mux_2x1_i20 (
    .sel( s74 ),
    .in_0( s73 ),
    .in_1( s71 ),
    .out( s82 )
  );
  Mux_2x1 Mux_2x1_i21 (
    .sel( s74 ),
    .in_0( s67 ),
    .in_1( s66 ),
    .out( s83 )
  );
  Mux_2x1 Mux_2x1_i22 (
    .sel( s74 ),
    .in_0( s69 ),
    .in_1( s68 ),
    .out( s84 )
  );
  Mux_2x1 Mux_2x1_i23 (
    .sel( s74 ),
    .in_0( s65 ),
    .in_1( s62 ),
    .out( s85 )
  );
  Mux_2x1 Mux_2x1_i24 (
    .sel( s74 ),
    .in_0( s46 ),
    .in_1( s25 ),
    .out( s86 )
  );
  Mux_2x1 Mux_2x1_i25 (
    .sel( s74 ),
    .in_0( s60 ),
    .in_1( s27 ),
    .out( s87 )
  );
  assign s6 = (s75 ^ s81);
  assign s5 = (s76 ^ s82);
  assign s4 = (s77 ^ s83);
  assign s3 = (s78 ^ s84);
  assign s2 = (s79 ^ s85);
  assign s1 = (s80 ^ s86);
  assign s0 = (\0-2  ^ s87);
endmodule
